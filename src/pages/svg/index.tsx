'use client'

import TransitionPane from '@/components/transition/pane'
import IntersectionVector from '@/components/ui/intersection-vector'
import TextReveal from '@/components/ui/text-reveal'
import TextRevealByChar from '@/components/ui/text-reveal-char'
import TextRevealByLine from '@/components/ui/text-reveal-line'
import Head from 'next/head'
import React, {
  MutableRefObject,
  Ref,
  RefObject,
  Suspense,
  useEffect,
} from 'react'

import {
  useInView,
  motion as Motion,
  useScroll,
  useTransform,
} from 'framer-motion'
import { ElementType, forwardRef } from 'react'
import { cn } from '@/lib/utils'

import { useRef, useState } from 'react'
import AspectRatioImage from '@/components/ui/aspect-ratio-image'
import HeroTooltip from '@/components/ui/hero-tooltip'
import Scene from '@/components/3d/scene'
import Footer from '@/components/layout/footer'
import SectionIndicator from '@/components/ui/section-indicator'
import VelocityMarquee from '@/components/ui/velocity-marquee'
import Marquee from '@/components/ui/marquee'
import Section from '@/components/ui/section'
import Button from '@/components/ui/button'

export default function About() {
  const pageRef = useRef<HTMLElement>(null)
  const paneRef = useRef<HTMLDivElement>(null)
  const sectionRef = {
    intro: useRef<HTMLElement>(null),
    projects: useRef<HTMLElement>(null),
    skillset: useRef<HTMLElement>(null),
  }

  const { scrollYProgress } = useScroll({
    target: paneRef,
    offset: ['start end', 'end start'],
  })
  const offsetY = useTransform(scrollYProgress, [0, 0.5], [10, -200])

  return (
    <React.Fragment>
      <Head>
        <title>SVG App</title>
        <meta name={'description'} content={'Generated by create next app'} />
        <meta
          name={'viewport'}
          content={'width=device-width, initial-scale=1'}
        />
        <link rel={'icon'} href={'/favicon.ico'} />
      </Head>

      <TransitionPane ref={paneRef}>
        <XGradient pageRef={pageRef} />
        <article
          ref={pageRef}
          className={
            'flex flex-col relative min-h-screen w-full overflow-hidden'
          }
        >
          <IntersectionVector className={'opacity-40'} />
          <Section className={'min-h-fit'} ref={sectionRef.intro}>
            <div className={'flex w-full h-fit pt-24 pb-6'}>
              <Suspense fallback={null}>
                <Scene />
              </Suspense>
              <TextRevealByChar
                as={'h1'}
                lineHeight={'1.195em'}
                delay={0.975}
                enterY={'-10%'}
                id={'hero-entry'}
                className={'hidden lg:flex cursor-default pl-[0.875em]'}
                typeClass={'font-xanh mr-0 tracking-[-0.08em] text-[25.225vw]'}
                text={'GeorgeCht'}
              />
              <Marquee className={'flex lg:hidden'}>
                <TextRevealByChar
                  as={'h1'}
                  lineHeight={'1.195em'}
                  delay={0.975}
                  enterY={'-20%'}
                  className={'pt-14 -mt-20 pl-[1.125em]'}
                  typeClass={'font-xanh mr-0 tracking-[-0.08em] text-[184px]'}
                  text={'GeorgeChtGeorgeCht'}
                />
              </Marquee>

              <HeroTooltip
                listItems={[
                  'front end developer',
                  'typography advocate',
                  'ui/ux design guru',
                  'cs major graduate',
                  'creative developer',
                  'typescript master',
                  'avid nextjs enjoyer',
                  'tailwind aficionado',
                ]}
              />
            </div>
            <div className={'flex flex-col lg:flex-row w-full'}>
              <div className={'w-full lg:w-[38.22%]'}>
                <div
                  className={
                    'max-w-[432px] md:max-w-[545px] -mt-8 sm:mt-0 sm:pt-6 lg:mb-18'
                  }
                >
                  <TextReveal
                    as={'p'}
                    lineHeight={'1em'}
                    typeClass={'type-sm mb-2'}
                    text={'georgecht Â© 2024'}
                  />
                  <TextReveal
                    as={'h1'}
                    lineHeight={'0.9em'}
                    className={'hidden sm:block'}
                    typeClass={'type-lg'}
                    text={'Working at the intersection of development & design'}
                  />
                  <TextRevealByLine
                    as={'h3'}
                    delay={0.675}
                    enterY={'10%'}
                    lineHeight={'0.9em'}
                    className={'block sm:hidden'}
                    typeClass={'type-lg'}
                    wrapperClass={'justify-between'}
                    text={'Working at the intersection of development & design'}
                  />
                </div>
              </div>

              <div
                className={
                  'flex flex-row w-full lg:w-[61.77%] pt-2 sm:pt-11 mb-24'
                }
              >
                <div className={'w-[61.77%]'}>
                  <div className={'max-w-[670px]'}>
                    <TextRevealByLine
                      as={'h3'}
                      delay={0.675}
                      lineHeight={'0.9em'}
                      typeClass={'type-xs'}
                      wrapperClass={'justify-start'}
                      text={
                        'Designed to save time while maintaining a strong visual presence on various social media channels, these templates feature a perfect blend of classic and contemporary styles, incorporating Designed to save time while maintaining a strong visual presence on various channels.'
                      }
                    />
                    <div className={'flex gap-2'}>
                      <Button delay={0.825} className={'min-w-[164px]'}>
                        My work
                      </Button>
                      <Button
                        delay={0.975}
                        variant={'outline'}
                        className={'min-w-[164px]'}
                      >
                        Get in touch
                      </Button>
                    </div>
                  </div>
                </div>
                <div className={'flex justify-end w-[38.22%]'}>
                  <div className={'max-w-[248px]'}>
                    <TextRevealByLine
                      as={'h3'}
                      delay={0.875}
                      lineHeight={'0.9em'}
                      typeClass={'type-xs'}
                      wrapperClass={'justify-end'}
                      text={
                        'Designed to save time while maintaining a strong visual presence on various channels.'
                      }
                    />
                  </div>
                </div>
              </div>
            </div>
          </Section>
          <Section className={'min-h-fit'} ref={sectionRef.projects}>
            <div className={'relative pt-4 mb-2'}>
              <SectionIndicator number={1} name={'Projects of interest'} />
            </div>
            <AspectRatioImage
              src={'/12.png'}
              ratio={16 / 9}
              responsiveRatio={1 / 1}
              distance={125}
              className={'mb-2'}
            />
            <AspectRatioImage
              src={'/13.png'}
              ratio={16 / 9}
              distance={125}
              className={'mb-2'}
            />

            <div className={'flex flex-col lg:flex-row w-full'}>
              <div className={'w-full lg:w-[38.22%] pr-2'} />
              <div className={'flex flex-row w-full lg:w-[61.77%]'}>
                <AspectRatioImage
                  src={'/12.png'}
                  distance={125}
                  className={'mb-2'}
                />
              </div>
            </div>

            <div className={'flex flex-col lg:flex-row w-full'}>
              <div className={'w-full lg:w-[38.22%] pr-2'}>
                <AspectRatioImage
                  src={'/12.png'}
                  distance={125}
                  className={'mb-2'}
                />
              </div>
              <div className={'flex flex-row w-full lg:w-[61.77%]'} />
            </div>
          </Section>
          <Section ref={sectionRef.skillset}>
            <XGradient pageRef={sectionRef.skillset} />
            <div className={'relative pt-6 mb-2'}>
              <SectionIndicator number={3} name={'Skillset'} />
            </div>
            <div className={'flex flex-col relative gap-0 sm:gap-2'}>
              <VelocityMarquee
                className={'cursor-default -ml-2.5 md:-ml-4'}
                direction={-1}
              >
                {[
                  'React',
                  'Typescript',
                  'NodeJS',
                  'React',
                  'Typescript',
                  'NodeJS',
                ].map((item, index) => (
                  <p
                    key={index}
                    className={cn(
                      'text-[16.333vw] sm:text-[10.333vw] leading-[1em] h-[calc(16.333vw*0.82)]',
                      'sm:h-[calc(10.333vw*0.82)] px-[calc(16.333vw*0.233)] sm:px-[calc(10.333vw*0.233)] my-1',
                      'uppercase font-variation-xlight border border-[#0A0A0A]/20 rounded-full',
                    )}
                  >
                    {item}
                  </p>
                ))}
              </VelocityMarquee>
              <VelocityMarquee
                className={'cursor-default -ml-2.5 md:-ml-4'}
                direction={1}
              >
                {[
                  'TailwindCSS',
                  'HTML',
                  'jQuery',
                  'TailwindCSS',
                  'HTML',
                  'jQuery',
                ].map((item, index) => (
                  <p
                    key={index}
                    className={cn(
                      'text-[16.333vw] sm:text-[10.333vw] leading-[1em] h-[calc(16.333vw*0.82)]',
                      'sm:h-[calc(10.333vw*0.82)] px-[calc(16.333vw*0.233)] sm:px-[calc(10.333vw*0.233)] my-1',
                      'uppercase font-variation-xlight border border-[#0A0A0A]/20 rounded-full',
                    )}
                  >
                    {item}
                  </p>
                ))}
              </VelocityMarquee>
              <VelocityMarquee
                className={'cursor-default -ml-2.5 md:-ml-4'}
                direction={-1}
              >
                {[
                  'UI/UX',
                  'Figma',
                  'Web design',
                  'UI/UX',
                  'Figma',
                  'Web design',
                ].map((item, index) => (
                  <p
                    key={index}
                    className={cn(
                      'text-[16.333vw] sm:text-[10.333vw] leading-[1em] h-[calc(16.333vw*0.82)]',
                      'sm:h-[calc(10.333vw*0.82)] px-[calc(16.333vw*0.233)] sm:px-[calc(10.333vw*0.233)] my-1',
                      'uppercase font-variation-xlight border border-[#0A0A0A]/20 rounded-full',
                    )}
                  >
                    {item}
                  </p>
                ))}
              </VelocityMarquee>
              <VelocityMarquee
                className={'cursor-default -ml-2.5 md:-ml-4'}
                direction={1}
              >
                {[
                  'Adobe',
                  'Photoshop',
                  'Typography',
                  'Adobe',
                  'Photoshop',
                  'Typography',
                ].map((item, index) => (
                  <p
                    key={index}
                    className={cn(
                      'text-[16.333vw] sm:text-[10.333vw] leading-[1em] h-[calc(16.333vw*0.82)]',
                      'sm:h-[calc(10.333vw*0.82)] px-[calc(16.333vw*0.233)] sm:px-[calc(10.333vw*0.233)] my-1',
                      'uppercase font-variation-xlight border border-[#0A0A0A]/20 rounded-full',
                    )}
                  >
                    {item}
                  </p>
                ))}
              </VelocityMarquee>
              <VelocityMarquee
                className={'cursor-default -ml-2.5 md:-ml-4'}
                direction={-1}
              >
                {[
                  'React',
                  'Typescript',
                  'NodeJS',
                  'React',
                  'Typescript',
                  'NodeJS',
                ].map((item, index) => (
                  <p
                    key={index}
                    className={cn(
                      'text-[16.333vw] sm:text-[10.333vw] leading-[1em] h-[calc(16.333vw*0.82)]',
                      'sm:h-[calc(10.333vw*0.82)] px-[calc(16.333vw*0.233)] sm:px-[calc(10.333vw*0.233)] my-1',
                      'uppercase font-variation-xlight border border-[#0A0A0A]/20 rounded-full',
                    )}
                  >
                    {item}
                  </p>
                ))}
              </VelocityMarquee>
              <VelocityMarquee
                className={'cursor-default -ml-2.5 md:-ml-4'}
                direction={1}
              >
                {[
                  'TailwindCSS',
                  'HTML',
                  'jQuery',
                  'TailwindCSS',
                  'HTML',
                  'jQuery',
                ].map((item, index) => (
                  <p
                    key={index}
                    className={cn(
                      'text-[16.333vw] sm:text-[10.333vw] leading-[1em] h-[calc(16.333vw*0.82)]',
                      'sm:h-[calc(10.333vw*0.82)] px-[calc(16.333vw*0.233)] sm:px-[calc(10.333vw*0.233)] my-1',
                      'uppercase font-variation-xlight border border-[#0A0A0A]/20 rounded-full',
                    )}
                  >
                    {item}
                  </p>
                ))}
              </VelocityMarquee>
              <VelocityMarquee
                className={
                  'cursor-default -ml-2.5 md:-ml-4 absolute top-[-23.333em] z-[-1]'
                }
                direction={1}
              >
                <p
                  className={cn(
                    'font-xanh text-[60vw] h-[calc(60vw*1.2)] leading-[1em]',
                    'px-[calc(16.333vw*0.233)] sm:px-[calc(10.333vw*0.233)]',
                    'tracking-[-0.08em] pointer-events-none blur-2xl',
                    'opacity-50',
                  )}
                >
                  GeorgeChtGeorgeChtGeorgeCht
                </p>
              </VelocityMarquee>
            </div>
          </Section>
        </article>
        <Footer />
      </TransitionPane>
    </React.Fragment>
  )
}

const XGradient = ({
  pageRef,
  className,
}: {
  pageRef: RefObject<HTMLElement>
  className?: string
}) => {
  const ANIMATION_SPEED = 0.3925
  const BUILT_IN_DELAY = 0.1025

  const isInView = useInView(pageRef, { once: true })

  const animation = {
    initial: { y: '-70%' },
    enter: {
      y: '0%',
      transition: {
        duration: 1.075,
        ease: 'easeIn',
        delay: ANIMATION_SPEED,
      },
    },
    exit: {
      y: '-70%',
      transition: {
        type: 'spring',
        stiffness: 275,
        damping: 30,
        delay: (ANIMATION_SPEED + BUILT_IN_DELAY) / 4,
      },
    },
  }

  return (
    <Motion.span
      variants={animation}
      animate={isInView ? 'enter' : 'exit'}
      exit={'exit'}
      initial={'initial'}
      className={cn(
        'absolute inline-block w-screen left-0 h-[90vh] bg-gradient-to-b from-[#D7F32B] z-[-1]',
        className,
      )}
    />
  )
}
